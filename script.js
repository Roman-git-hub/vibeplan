// VibePlan — Final edition (no long-term state stored)
// Settings (owner/repo/path/token + remember flag) stored in localStorage.
// Data state is in-memory and saved/loaded only via GitHub when user clicks buttons.
const CREDENTIALS = { user: "Roman", pass: "12345678" };
const SETTINGS_KEY = "vibeplan_settings_final";
let state = { meta:{generated:new Date().toISOString()}, items: [] };
let settings = null;
function $(id){ return document.getElementById(id); }
function defaultIdeas(){ return { meta:{generated:new Date().toISOString()}, items: [ {"day":"Пн","category":"Животные","title":"Cute dog tshirt","es":"Mi perro es mi familia — diseño divertido con huella","en":"My dog is my family — cute paw design","platforms":{"tiktok":true,"instagram":true,"redbubble":true},"published":false} ] }; }
function loadSettings(){ const raw = localStorage.getItem(SETTINGS_KEY); if(raw) settings = JSON.parse(raw); else settings = { ghOwner:'', ghRepo:'', ghPath:'data.json', ghToken:'', rememberLogin:false, logged:false }; }
function saveSettings(){ localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings)); }
function renderWeek(){ const weekGrid = $('weekGrid'); weekGrid.innerHTML=''; const days = ['Пн','Вт','Ср','Чт','Пт','Сб','Вс']; for(const d of days){ const col = document.createElement('div'); col.className='card'; const title = document.createElement('div'); title.className='dayTitle'; title.innerHTML = `<strong>${d}</strong><span class="small">день</span>`; col.appendChild(title); const posts = state.items.filter(it=>it.day===d); if(!posts.length){ const p = document.createElement('div'); p.className='small'; p.textContent='Нет идей на этот день'; col.appendChild(p); } else { state.items.forEach((post, idx)=>{ if(post.day!==d) return; const card = document.createElement('div'); card.className='idea-card'; const h = document.createElement('h4'); h.textContent = post.title; const langDiv = document.createElement('div'); langDiv.className='langs'; langDiv.innerHTML = `<em>ES:</em> ${post.es}<br><em>EN:</em> ${post.en}`; const meta = document.createElement('div'); meta.className='meta'; const cbTik = document.createElement('label'); cbTik.className='checkbox-inline'; cbTik.innerHTML = `<input type="checkbox" data-idx="${idx}" data-plat="tiktok" ${post.platforms.tiktok? 'checked':''}/> TikTok`; const cbIG = document.createElement('label'); cbIG.className='checkbox-inline'; cbIG.innerHTML = `<input type="checkbox" data-idx="${idx}" data-plat="instagram" ${post.platforms.instagram? 'checked':''}/> Instagram`; const cbRB = document.createElement('label'); cbRB.className='checkbox-inline'; cbRB.innerHTML = `<input type="checkbox" data-idx="${idx}" data-plat="redbubble" ${post.platforms.redbubble? 'checked':''}/> RedBubble`; meta.appendChild(cbTik); meta.appendChild(cbIG); meta.appendChild(cbRB); const actions = document.createElement('div'); actions.className='idea-actions'; const pubBtn = document.createElement('button'); pubBtn.textContent = post.published? '✅ Опубликовано':'Отметить'; pubBtn.dataset.action='togglePub'; pubBtn.dataset.idx=idx; const editBtn = document.createElement('button'); editBtn.textContent = 'Редактировать'; editBtn.dataset.action='edit'; editBtn.dataset.idx=idx; const delBtn = document.createElement('button'); delBtn.textContent = 'Удалить'; delBtn.dataset.action='del'; delBtn.dataset.idx=idx; actions.appendChild(pubBtn); actions.appendChild(editBtn); actions.appendChild(delBtn); card.appendChild(h); card.appendChild(langDiv); card.appendChild(meta); card.appendChild(actions); col.appendChild(card); }); } weekGrid.appendChild(col); } document.querySelectorAll('.checkbox-inline input[type="checkbox"]').forEach(cb=>cb.onchange = onPlatformToggle); document.querySelectorAll('.idea-actions button').forEach(b=>b.onclick = onActionClick); }
function onPlatformToggle(e){ const idx = parseInt(e.target.dataset.idx); const plat = e.target.dataset.plat; if(typeof idx !== 'number' || !state.items[idx]) return; state.items[idx].platforms[plat] = e.target.checked; }
function onActionClick(e){ const action = e.target.dataset.action; const idx = parseInt(e.target.dataset.idx); if(action==='togglePub'){ state.items[idx].published = !state.items[idx].published; renderWeek(); } else if(action==='edit'){ openNewModal(state.items[idx]); } else if(action==='del'){ if(confirm('Удалить идею?')){ state.items.splice(idx,1); renderWeek(); } } }
function showModal(id){ $(id).classList.add('show'); } function hideModal(id){ $(id).classList.remove('show'); }
function initUI(){ $('loginBtn').onclick = onLogin; $('btnLogout').onclick = onLogout; $('btnNew').onclick = ()=> openNewModal(); $('btnExport').onclick = exportTXT; $('btnSettings').onclick = ()=> showSettings(); $('btnSync').onclick = syncNow; $('saveSettings').onclick = saveSettingsUI; $('testConn').onclick = testConnection; $('loadRemote').onclick = loadFromGitHub; $('closeSettings').onclick = ()=> hideModal('settingsModal'); $('closeNew').onclick = ()=> hideModal('newModal'); $('saveIdea').onclick = saveIdeaFromModal; $('rememberMe').checked = settings.rememberLogin || false; $('loginUser').value = CREDENTIALS.user; }
function onLogin(){ const u = $('loginUser').value.trim(); const p = $('loginPass').value; if(u === CREDENTIALS.user && p === CREDENTIALS.pass){ settings.logged = true; settings.rememberLogin = !!$('rememberMe').checked; saveSettings(); hideModal('loginModal'); state = defaultIdeas(); renderWeek(); } else alert('Неверный логин или пароль'); }
function onLogout(){ settings.logged = false; saveSettings(); location.reload(); }
function openNewModal(post){ showModal('newModal'); if(post){ const idx = state.items.indexOf(post); $('newModal').dataset.editIdx = idx; $('ideaCategory').value = post.category || 'Животные'; $('ideaTitle').value = post.title || ''; $('ideaTextES').value = post.es || ''; $('ideaTextEN').value = post.en || ''; $('forTikTok').checked = !!post.platforms.tiktok; $('forIG').checked = !!post.platforms.instagram; $('forRB').checked = !!post.platforms.redbubble; } else { delete $('newModal').dataset.editIdx; $('ideaCategory').value = 'Животные'; $('ideaTitle').value = ''; $('ideaTextES').value = ''; $('ideaTextEN').value = ''; $('forTikTok').checked = true; $('forIG').checked = true; $('forRB').checked = false; } }
function saveIdeaFromModal(){ const cat = $('ideaCategory').value; const title = $('ideaTitle').value.trim() || 'Без названия'; const es = $('ideaTextES').value.trim(); const en = $('ideaTextEN').value.trim(); const p = { tiktok:!!$('forTikTok').checked, instagram:!!$('forIG').checked, redbubble:!!$('forRB').checked }; const editIdx = $('newModal').dataset.editIdx; if(editIdx !== undefined){ const i = parseInt(editIdx); state.items[i].category = cat; state.items[i].title = title; state.items[i].es = es; state.items[i].en = en; state.items[i].platforms = p; } else { const days = ['Вс','Пн','Вт','Ср','Чт','Пт','Сб']; const today = new Date().getDay(); const day = days[today]; state.items.push({ day, category:cat, title, es, en, platforms:p, published:false }); } hideModal('newModal'); renderWeek(); }
function exportTXT(){ let out = ''; const days = ['Пн','Вт','Ср','Чт','Пт','Сб','Вс']; for(const d of days){ out += d + '\n'; const posts = state.items.filter(it=>it.day===d); for(const p of posts){ out += `- ${p.title} | ES: ${p.es} | EN: ${p.en} | TikTok:${p.platforms.tiktok?'Y':'N'} IG:${p.platforms.instagram?'Y':'N'} RB:${p.platforms.redbubble?'Y':'N'} | Published:${p.published? 'Y':'N'}\n`; } out += '\n'; } const blob = new Blob([out], {type:'text/plain;charset=utf-8'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'vibeplan_week.txt'; a.click(); URL.revokeObjectURL(url); }
function showSettings(){ showModal('settingsModal'); $('ghOwner').value = settings.ghOwner || ''; $('ghRepo').value = settings.ghRepo || ''; $('ghPath').value = settings.ghPath || 'data.json'; $('ghToken').value = settings.ghToken || ''; }
function saveSettingsUI(){ settings.ghOwner = $('ghOwner').value.trim(); settings.ghRepo = $('ghRepo').value.trim(); settings.ghPath = $('ghPath').value.trim() || 'data.json'; settings.ghToken = $('ghToken').value.trim(); saveSettings(); hideModal('settingsModal'); alert('Настройки сохранены. Нажмите «Загрузить с GitHub», чтобы подтянуть данные, или «Синхронизировать», чтобы создать/обновить файл.'); }
async function testConnection(){ if(!settings.ghOwner||!settings.ghRepo||!settings.ghToken){ alert('Заполните owner, repo и token.'); return; } const api = `https://api.github.com/repos/${settings.ghOwner}/${settings.ghRepo}`; try{ const r = await fetch(api, { headers: { Authorization: 'token ' + settings.ghToken } }); if(r.ok) alert('Соединение с GitHub установлено.'); else alert('Ошибка подключения: ' + r.status); }catch(e){ alert('Ошибка: ' + e.message); } }
async function loadFromGitHub(){ if(!settings.ghOwner||!settings.ghRepo||!settings.ghToken){ alert('Заполните настройки GitHub.'); showSettings(); return; } const statusEl = $('syncStatus'); statusEl.textContent = 'Статус: загрузка с GitHub...'; const api = `https://api.github.com/repos/${settings.ghOwner}/${settings.ghRepo}/contents/${settings.ghPath}`; try{ const r = await fetch(api, { headers: { Authorization: 'token ' + settings.ghToken } }); if(r.ok){ const j = await r.json(); const decoded = decodeURIComponent(escape(atob(j.content))); const parsed = JSON.parse(decoded); if(parsed && parsed.items) state = parsed; else state = parsed; statusEl.textContent = 'Статус: ✅ загружено'; renderWeek(); alert('Данные загружены из репозитория.'); } else if(r.status===404){ statusEl.textContent = 'Статус: файл не найден в репозитории'; alert('Файл не найден. Можно создать его через кнопку Синхронизировать.'); state = defaultIdeas(); renderWeek(); } else { statusEl.textContent = 'Статус: ошибка при загрузке'; alert('Ошибка загрузки: ' + r.status); } }catch(e){ statusEl.textContent = 'Статус: ошибка сети'; alert('Ошибка: ' + e.message); } }
async function syncNow(){ if(!settings.ghOwner||!settings.ghRepo||!settings.ghToken){ alert('Заполните настройки GitHub.'); showSettings(); return; } const statusEl = $('syncStatus'); statusEl.textContent = 'Статус: отправка в GitHub...'; const api = `https://api.github.com/repos/${settings.ghOwner}/${settings.ghRepo}/contents/${settings.ghPath}`; try{ const getRes = await fetch(api, { headers: { Authorization: 'token ' + settings.ghToken } }); let sha = null; if(getRes.ok){ const g = await getRes.json(); sha = g.sha; } const content = btoa(unescape(encodeURIComponent(JSON.stringify(state, null, 2)))); const body = { message: 'VibePlan: update data', content }; if(sha) body.sha = sha; const putRes = await fetch(api, { method:'PUT', headers: { Authorization: 'token ' + settings.ghToken, 'Content-Type':'application/json' }, body: JSON.stringify(body) }); if(putRes.ok){ statusEl.textContent = 'Статус: ✅ синхронизировано'; alert('Данные успешно записаны в репозиторий.'); } else { const t = await putRes.text(); statusEl.textContent = 'Статус: ❌ ошибка записи'; alert('Ошибка записи: ' + putRes.status + '\n' + t); } }catch(e){ statusEl.textContent = 'Статус: ❌ ошибка сети'; alert('Ошибка синхронизации: ' + e.message); } }
function start(){ loadSettings(); initUI(); if(!settings.logged){ showModal('loginModal'); } else { state = defaultIdeas(); renderWeek(); } }
start();
